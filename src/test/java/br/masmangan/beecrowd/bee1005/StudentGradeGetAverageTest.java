
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-cucumber using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3
"""
Scenario 1: Verify the calculated average when equally weighted grades are given
Details:
  TestName: testEqualWeightedGradesAverageCalculation
  Description: In this test scenario, we are passing equally weighted grades for course 'a' and 'b', and checking whether the average is calculated correctly or not.
Execution:
  Arrange: Initialize StudentGrade student = new StudentGrade(); student.setA(5.0); student.setB(5.0);
  Act: Invoke the getAverage() method.
  Assert: Assert that the returned value is 5.0
Validation:
  This assertion verifies that the average is calculated correctly when 'a' and 'b' grades are equally weighted. This test highlights the correct behavior of the method when provided with valid input data.
Scenario 2: Validate the average calculation with the maximum grades are given
Details:
  TestName: testMaximumGradesAverageCalculation
  Description: In this test scenario, we are passing the maximum possible grades for both course 'a' and 'b', and validating if the average is calculated correctly.
Execution:
  Arrange: Initialize StudentGrade student = new StudentGrade(); student.setA(10.0); student.setB(10.0);
  Act: Invoke the getAverage() method.
  Assert: Assert that the returned value is 10.0.
Validation:
  This assertion aims to confirm that the maximum grade calculation works correctly. This test verifies the positive boundary case for the method.
Scenario 3: Validate the average calculation with the minimum grades
Details:
  TestName: testMinimumGradesAverageCalculation
  Description: In this scenario, we are passing the minimum possible grades for both course 'a' and 'b', and checking if the average grade computation is correct.
Execution:
  Arrange: Initialize StudentGrade student = new StudentGrade(); student.setA(0.0); student.setB(0.0);
  Act: Invoke the getAverage() method.
  Assert: Assert that the returned value is 0.0.
Validation:
  This assertion checks that the minimum grade calculation operates correctly. This test verifies the negative boundary case for the method.
Scenario 4: Validate the average calculation with random grades
Details:
  TestName: testRandomGradesAverageCalculation
  Description: In this scenario, we are passing random grades for both course 'a' and 'b', and validating if the average grade computation is correct.
Execution:
  Arrange: Initialize StudentGrade student = new StudentGrade(); student.setA(7.0); student.setB(3.2);
  Act: Invoke the getAverage() method.
  Assert: Assert that the returned value matches the expected value.
Validation:
  This assertion verifies that the grade average calculation works correctly for any random input values. This test is for typical business as usual scenario.
  """
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

@Tag("br.masmangan.beecrowd.bee1005")
@Tag("br.masmangan.beecrowd.bee1005.getAverage")
public class StudentGradeGetAverageTest {

	@Tag("valid")
	@Test
	public void testEqualWeightedGradesAverageCalculation() {
		StudentGrade student = new StudentGrade();
		student.setA(5.0);
		student.setB(5.0);
		assertEquals(5.0, student.getAverage());
	}

	@Tag("valid")
	@Test
	public void testMaximumGradesAverageCalculation() {
		StudentGrade student = new StudentGrade();
		student.setA(10.0);
		student.setB(10.0);
		assertEquals(10.0, student.getAverage());
	}

	@Tag("valid")
	@Test
	public void testMinimumGradesAverageCalculation() {
		StudentGrade student = new StudentGrade();
		student.setA(0.0);
		student.setB(0.0);
		assertEquals(0.0, student.getAverage());
	}

	@Tag("valid")
	@Test
	public void testRandomGradesAverageCalculation() {
		StudentGrade student = new StudentGrade();
		student.setA(7.0);
		student.setB(3.2);
		double expectedValue = (7.0 * 3.5 + 3.2 * 7.5) / 11.0;
		assertEquals(expectedValue, student.getAverage());
	}

}